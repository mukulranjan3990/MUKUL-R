#include <iostream>
using namespace std;

// Node structure for Circular Linked List
class node {
public:
    int data;
    node *next;

    node(int value) {
        data = value;
        next = NULL;
    }
};

// Insert at head
void insertAtHead(node *&head, int value) {
    node *n = new node(value);
    if (head == NULL) {
        n->next = n; // Point to itself
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = n;
    n->next = head;
    head = n;
}

// Insert at tail
void insertAtTail(node *&head, int value) {
    node *n = new node(value);
    if (head == NULL) {
        n->next = n; // Point to itself
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    temp->next = n;
    n->next = head;
}

// Insert at middle
void insertAtMiddle(node *&head, int point, int value) {
    if (head == NULL) return;
    node *n = new node(value);
    node *temp = head;
    do {
        if (temp->data == point) {
            n->next = temp->next;
            temp->next = n;
            return;
        }
        temp = temp->next;
    } while (temp != head);
}

// Delete head
void deleteHead(node *&head) {
    if (head == NULL) return;
    if (head->next == head) { // Only one node
        delete head;
        head = NULL;
        return;
    }
    node *temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }
    node *toDelete = head;
    temp->next = head->next;
    head = head->next;
    delete toDelete;
}

// Delete a specific node
void deleteNode(node *&head, int value) {
    if (head == NULL) return;
    if (head->data == value) {
        deleteHead(head);
        return;
    }
    node *temp = head;
    do {
        if (temp->next->data == value) {
            node *toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
            return;
        }
        temp = temp->next;
    } while (temp != head);
}

// Display the Circular Linked List
void display(node *head) {
    if (head == NULL) {
        cout << "List is empty" << endl;
        return;
    }
    node *temp = head;
    do {
        cout << temp->data << " ";
        temp = temp->next;
    } while (temp != head);
    cout << endl;
}

// Main function to demonstrate Circular Linked List
int main() {
    node *head = NULL;

    insertAtTail(head, 10);
    insertAtTail(head, 20);
    insertAtTail(head, 30);
    display(head);

    insertAtHead(head, 5);
    display(head);

    insertAtMiddle(head, 20, 25);
    display(head);

    deleteHead(head);
    display(head);

    deleteNode(head, 25);
    display(head);

    return 0;
}
